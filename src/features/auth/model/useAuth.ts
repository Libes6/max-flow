import { useState, useEffect } from 'react';
import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';
import { supabase } from '../../../shared/lib/supabase';
import type { User, Session, AuthError } from '@supabase/supabase-js';
import { LoginFormData, RegisterFormData } from './auth-schemas';
import { authCache, type CachedUserProfile } from './auth-cache';

export interface AuthUser {
  id: string;
  email: string;
  firstName: string;
  lastName: string;
  avatarUrl?: string;
}

export const useAuth = () => {
  const queryClient = useQueryClient();
  const [isLoading, setIsLoading] = useState(true);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const initializeAuth = async () => {
    console.log('üöÄ Initializing auth state...');
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –æ—Ç Supabase (—Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç MMKV)
      const { data: { session }, error } = await supabase.auth.getSession();
      if (error) {
        console.error('‚ùå Error during auth initialization:', error);
        setIsLoading(false);
        return;
      }
      
      console.log('‚úÖ Auth initialized, session:', session ? 'exists' : 'null');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º React Query
      queryClient.setQueryData(['auth', 'session'], session);
      
      setIsLoading(false);
    } catch (error) {
      console.error('‚ùå Auth initialization failed:', error);
      setIsLoading(false);
    }
  };

  const { data: session } = useQuery({
    queryKey: ['auth', 'session'],
    queryFn: async () => {
      console.log('üîÑ Fetching session...');
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –æ—Ç Supabase (—Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç MMKV)
      const { data: { session }, error } = await supabase.auth.getSession();
      if (error) {
        console.error('‚ùå Error fetching session:', error);
        throw error;
      }
      
      console.log('‚úÖ Session fetched from Supabase:', session ? 'exists' : 'null');
      
      return session;
    },
    staleTime: 1000 * 60 * 5, // 5 –º–∏–Ω—É—Ç
    retry: false, // –ù–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ
  });

  const { data: user, isLoading: isUserLoading } = useQuery({
    queryKey: ['auth', 'user'],
    queryFn: async (): Promise<AuthUser | null> => {
      if (!session?.user) {
        console.log('üîç No session user found');
        return null;
      }
      
      console.log('üîç Fetching user profile for:', session.user.id);
      
      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç Supabase
      const { data, error } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', session.user.id)
        .single();
      
      if (error) {
        console.error('‚ùå Error fetching user profile:', error);
        throw error;
      }
      
      console.log('‚úÖ User profile data from Supabase:', data);
      
      if (data) {
        return {
          id: data.id,
          email: data.email,
          firstName: data.first_name,
          lastName: data.last_name,
          avatarUrl: data.avatar_url,
        };
      }
      
      return null;
    },
    enabled: !!session?.user,
    staleTime: 1000 * 60 * 5, // 5 –º–∏–Ω—É—Ç
    retry: false, // –ù–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ
  });

  const loginMutation = useMutation({
    mutationFn: async (credentials: LoginFormData) => {
      console.log('üîê Attempting login for:', credentials.email);
      
      const { data, error } = await supabase.auth.signInWithPassword({
        email: credentials.email,
        password: credentials.password,
      });
      
      if (error) {
        console.error('‚ùå Login error from Supabase:', error);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π —Å –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º email
        if (error.message.includes('Email not confirmed')) {
          throw new Error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à email –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.');
        }
        
        throw error;
      }
      
      console.log('‚úÖ Login successful from Supabase:', data);
      return data;
    },
    onSuccess: (data) => {
      console.log('üéâ Login mutation success, invalidating queries');
      queryClient.invalidateQueries({ queryKey: ['auth'] });
    },
  });

  const registerMutation = useMutation({
    mutationFn: async (userData: RegisterFormData) => {
      console.log('üìù Starting registration for:', userData.email);
      
      const { data, error } = await supabase.auth.signUp({
        email: userData.email,
        password: userData.password,
        options: {
          data: {
            first_name: userData.firstName,
            last_name: userData.lastName,
          },
        },
      });
      if (error) {
        console.error('‚ùå Registration error:', error);
        throw error;
      }
      
      console.log('‚úÖ Registration successful:', data);
      return data;
    },
    onSuccess: (data) => {
      console.log('üéâ Registration mutation success, invalidating queries');
      queryClient.invalidateQueries({ queryKey: ['auth'] });
    },
  });

  const logoutMutation = useMutation({
    mutationFn: async () => {
      const { error } = await supabase.auth.signOut();
      if (error) throw error;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['auth'] });
    },
  });

  const resendConfirmationMutation = useMutation({
    mutationFn: async (email: string) => {
      console.log('üìß Resending confirmation email to:', email);
      
      const { error } = await supabase.auth.resend({
        type: 'signup',
        email: email,
      });
      
      if (error) {
        console.error('‚ùå Resend confirmation error:', error);
        throw error;
      }
      
      console.log('‚úÖ Confirmation email resent successfully');
    },
  });

  useEffect(() => {
    console.log('üöÄ Setting up auth state listener...');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    initializeAuth();
    
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        console.log('üîÑ Auth state changed:', event, session ? 'session exists' : 'no session');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
        setIsLoading(false);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º React Query
        queryClient.setQueryData(['auth', 'session'], session);
        
        if (event === 'SIGNED_OUT') {
          console.log('üö™ User signed out');
          queryClient.setQueryData(['auth', 'user'], null);
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –≤—Ö–æ–¥–∞
        if (event === 'SIGNED_IN' || event === 'TOKEN_REFRESHED') {
          console.log('‚úÖ User signed in or token refreshed');
          queryClient.invalidateQueries({ queryKey: ['auth', 'user'] });
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if (event === 'INITIAL_SESSION') {
          console.log('üéØ Initial session loaded');
          if (session) {
            console.log('üë§ User is already authenticated');
            queryClient.invalidateQueries({ queryKey: ['auth', 'user'] });
          } else {
            console.log('üë§ No authenticated user found');
          }
        }
      }
    );

    return () => {
      console.log('üßπ Cleaning up auth state listener');
      subscription.unsubscribe();
    };
  }, [queryClient]);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  const isOverallLoading = isLoading || (!!session?.user && isUserLoading);

  return {
    user,
    session,
    isLoading: isOverallLoading,
    isAuthenticated: !!user,
    login: loginMutation.mutate,
    loginError: loginMutation.error,
    isLoginLoading: loginMutation.isPending,
    register: registerMutation.mutate,
    registerError: registerMutation.error,
    isRegisterLoading: registerMutation.isPending,
    logout: logoutMutation.mutate,
    logoutError: logoutMutation.error,
    isLogoutLoading: logoutMutation.isPending,
    resendConfirmation: resendConfirmationMutation.mutate,
    resendConfirmationError: resendConfirmationMutation.error,
    isResendConfirmationLoading: resendConfirmationMutation.isPending,
    refreshAuth: initializeAuth, // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  };
};
