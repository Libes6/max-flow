import notifee, { 
  AndroidImportance, 
  AndroidVisibility, 
  AndroidCategory,
  AuthorizationStatus,
  TriggerType,
  TimeUnit,
  RepeatFrequency
} from '@notifee/react-native';
import { Platform } from 'react-native';

export interface NotifeeNotificationData {
  id: string;
  title: string;
  body: string;
  date: Date;
  type: string;
  habitId?: string;
  data?: Record<string, any>;
}

class NotifeeService {
  private isInitialized = false;

  async initialize(): Promise<void> {
    if (this.isInitialized) return;

    try {
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
      const settings = await notifee.requestPermission();
      
      if (settings.authorizationStatus === AuthorizationStatus.AUTHORIZED) {
        console.log('‚úÖ Notifee —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã');
      } else if (settings.authorizationStatus === AuthorizationStatus.DENIED) {
        console.log('‚ùå Notifee —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã');
      }

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞–Ω–∞–ª—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      await this.createNotificationChannels();

      this.isInitialized = true;
      console.log('‚úÖ NotifeeService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ NotifeeService:', error);
    }
  }

  private async createNotificationChannels(): Promise<void> {
    // –ö–∞–Ω–∞–ª –¥–ª—è –ø—Ä–∏–≤—ã—á–µ–∫
    await notifee.createChannel({
      id: 'habits',
      name: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∏–≤—ã—á–∫–∞—Ö',
      importance: AndroidImportance.HIGH,
      visibility: AndroidVisibility.PUBLIC,
      sound: 'default',
      vibration: true,
    });

    // –ö–∞–Ω–∞–ª –¥–ª—è –æ–±—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    await notifee.createChannel({
      id: 'general',
      name: '–û–±—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
      importance: AndroidImportance.DEFAULT,
      visibility: AndroidVisibility.PUBLIC,
      sound: 'default',
    });

    // –ö–∞–Ω–∞–ª –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    await notifee.createChannel({
      id: 'test',
      name: '–¢–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
      importance: AndroidImportance.HIGH,
      visibility: AndroidVisibility.PUBLIC,
      sound: 'default',
      vibration: true,
    });
  }

  async scheduleNotification(notification: NotifeeNotificationData): Promise<string> {
    try {
      await this.initialize();

      const trigger = {
        type: TriggerType.TIMESTAMP,
        timestamp: notification.date.getTime(),
        repeatFrequency: RepeatFrequency.NONE,
      };

      const channelId = this.getChannelId(notification.type);

      const notificationId = await notifee.createTriggerNotification(
        {
          id: notification.id,
          title: notification.title,
          body: notification.body,
          data: {
            ...notification.data,
            type: notification.type,
            habitId: notification.habitId,
          },
          android: {
            channelId,
            importance: AndroidImportance.HIGH,
            visibility: AndroidVisibility.PUBLIC,
            category: AndroidCategory.REMINDER,
            pressAction: {
              id: 'default',
            },
            sound: 'default',
            vibrationPattern: [300, 500],
          },
        },
        trigger
      );

      console.log('‚úÖ Notifee —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ:', notificationId);
      return notificationId;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Notifee —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      throw error;
    }
  }

  async showInstantNotification(title: string, body: string, type: string = 'test'): Promise<string> {
    try {
      await this.initialize();

      const channelId = this.getChannelId(type);
      const notificationId = Date.now().toString();

      await notifee.displayNotification({
        id: notificationId,
        title,
        body,
        android: {
          channelId,
          importance: AndroidImportance.HIGH,
          visibility: AndroidVisibility.PUBLIC,
          pressAction: {
            id: 'default',
          },
          sound: 'default',
          vibrationPattern: [300, 500],
        },
      });

      console.log('‚úÖ Notifee –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–æ:', notificationId);
      return notificationId;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ Notifee —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      throw error;
    }
  }

  async cancelNotification(notificationId: string): Promise<void> {
    try {
      await notifee.cancelNotification(notificationId);
      console.log('‚úÖ Notifee —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ:', notificationId);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã Notifee —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    }
  }

  async cancelAllNotifications(): Promise<void> {
    try {
      await notifee.cancelAllNotifications();
      console.log('‚úÖ –í—Å–µ Notifee —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –≤—Å–µ—Ö Notifee —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    }
  }

  async getScheduledNotifications(): Promise<any[]> {
    try {
      const notifications = await notifee.getTriggerNotifications();
      return notifications;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Notifee —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
      return [];
    }
  }

  private getChannelId(type: string): string {
    switch (type) {
      case 'habit_reminder':
        return 'habits';
      case 'test':
        return 'test';
      default:
        return 'general';
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  setupEventHandlers(): void {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    notifee.onForegroundEvent(({ type, detail }) => {
      console.log('üì± Notifee foreground event:', { type, detail });
      
      if (type === 1) { // PRESS
        console.log('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞–∂–∞—Ç–æ:', detail.notification);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
    notifee.onBackgroundEvent(async ({ type, detail }) => {
      console.log('üì± Notifee background event:', { type, detail });
    });
  }
}

export const notifeeService = new NotifeeService();


