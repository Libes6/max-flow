import { setupURLPolyfill } from 'react-native-url-polyfill';
import { Platform } from 'react-native';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ URL –ø–æ–ª–∏—Ñ–∏–ª–ª–∞ –¥–ª—è React Native
if (Platform.OS !== 'web') {
  setupURLPolyfill();
}
import { createClient } from '@supabase/supabase-js';
import config from './config';

// –°–æ–∑–¥–∞–Ω–∏–µ Supabase –∫–ª–∏–µ–Ω—Ç–∞
export const supabase = createClient(
  config.supabase.url,
  config.supabase.anonKey,
  {
    auth: {
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
      autoRefreshToken: true,
      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
      persistSession: true,
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ URL –¥–ª—è OAuth
      detectSessionInUrl: false,
    },
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è React Native
    global: {
      headers: {
        'X-Client-Info': 'flow-max-react-native',
      },
    },
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ real-time
    realtime: {
      params: {
        eventsPerSecond: 10,
      },
    },
  }
);

// –≠–∫—Å–ø–æ—Ä—Ç —Ç–∏–ø–æ–≤ Supabase
export type { User, Session, AuthError } from '@supabase/supabase-js';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
export const testSupabaseConnection = async () => {
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase...');
    console.log('URL:', config.supabase.url);
    console.log('Anon Key:', config.supabase.anonKey ? '***' + config.supabase.anonKey.slice(-4) : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –∏ –∫–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
    if (!config.supabase.url || config.supabase.url === 'your_supabase_project_url_here') {
      throw new Error('SUPABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
    
    if (!config.supabase.anonKey || config.supabase.anonKey === 'your_anon_key_here') {
      throw new Error('SUPABASE_ANON_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
    
    // –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const { data, error } = await supabase.from('test').select('count').limit(1);
    
    if (error) {
      // –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ profiles –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
      if (error.code === 'PGRST205') {
        console.log('‚úÖ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! (—Ç–∞–±–ª–∏—Ü–∞ profiles –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞)');
        return true;
      }
      throw error;
    }
    
    console.log('‚úÖ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!');
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase:', error);
    return false;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const getCurrentUser = async () => {
  try {
    const { data: { user }, error } = await supabase.auth.getUser();
    if (error) throw error;
    return user;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    return null;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
export const getCurrentSession = async () => {
  try {
    const { data: { session }, error } = await supabase.auth.getSession();
    if (error) throw error;
    return session;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
    return null;
  }
};

export default supabase;
