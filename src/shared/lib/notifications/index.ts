import PushNotification from 'react-native-push-notification';
import { Platform } from 'react-native';
import { mmkvStorageAdapter } from '../mmkv';
import { getFCMToken, setupBackgroundMessageHandler, setupForegroundMessageHandler } from '../firebase';
import { requestExactAlarmPermission, checkAllPermissions } from '../permissions';

export interface NotificationData {
  id: string;
  title: string;
  message: string;
  date: Date;
  habitId?: string;
  type: 'habit_reminder' | 'motivation';
  scheduled: boolean;
  sent?: boolean;
  token?: string;
}

export interface NotificationSettings {
  allNotifications: boolean;
  habitReminders: boolean;
  motivationalMessages: boolean;
  habitReminderTime: string; // HH:mm format
  habitReminderDays: number[]; // [0,1,2,3,4,5,6] - –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ (0 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
  motivationalTime: string; // HH:mm format
}

class NotificationService {
  private isInitialized = false;
  private pushToken: string | null = null;

  async initialize(): Promise<void> {
    if (this.isInitialized) return;

    console.log('üîî NotificationService: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Firebase Messaging
    console.log('üîî NotificationService: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Firebase –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏...');
    setupBackgroundMessageHandler();
    setupForegroundMessageHandler();

    // –ü–æ–ª—É—á–∞–µ–º FCM —Ç–æ–∫–µ–Ω
    const fcmToken = await getFCMToken();
    if (fcmToken) {
      this.pushToken = fcmToken;
      mmkvStorageAdapter.setItem('push_token', fcmToken);
    }

    PushNotification.configure({
      onRegister: async (token) => {
        console.log('Push notification token:', token);
        this.pushToken = token.token;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ MMKV
        mmkvStorageAdapter.setItem('push_token', token.token);
      },

      onNotification: (notification) => {
        console.log('Notification received:', notification);
        this.handleNotificationPress(notification);
      },

      onAction: (notification) => {
        console.log('Notification action:', notification);
        this.handleNotificationAction(notification);
      },

      onRegistrationError: (err) => {
        console.error('Push notification registration error:', err);
      },

      permissions: {
        alert: true,
        badge: true,
        sound: true,
      },

      popInitialNotification: true,
      requestPermissions: Platform.OS === 'ios',
    });

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
    this.pushToken = mmkvStorageAdapter.getItem('push_token');

    this.isInitialized = true;
  }

  async requestPermissions(): Promise<boolean> {
    return new Promise(async (resolve) => {
      try {
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const pushPermissions = await PushNotification.requestPermissions();
        console.log('üì± Push permissions result:', pushPermissions);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã
        let pushGranted = false;
        
        if (pushPermissions && typeof pushPermissions === 'object') {
          pushGranted = !!(pushPermissions.alert && pushPermissions.badge && pushPermissions.sound);
        } else {
          // –ï—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±
          console.log('‚ö†Ô∏è Push permissions –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±');
          pushGranted = true; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –µ—Å—Ç—å
        }
        
        console.log('üîî Push permissions granted:', pushGranted);
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —Ç–æ—á–Ω—ã–µ –±—É–¥–∏–ª—å–Ω–∏–∫–∏
        const exactAlarmGranted = await requestExactAlarmPermission();
        
        const allGranted = pushGranted && exactAlarmGranted;
        mmkvStorageAdapter.setItem('notification_permissions', allGranted.toString());
        
        console.log('üîê –†–∞–∑—Ä–µ—à–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', { pushGranted, exactAlarmGranted, allGranted });
        resolve(allGranted);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:', error);
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ä–∞–±–æ—Ç—É —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        console.log('‚ö†Ô∏è –†–∞–∑—Ä–µ—à–∞–µ–º —Ä–∞–±–æ—Ç—É —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É');
        resolve(true);
      }
    });
  }


  async scheduleNotification(notification: Omit<NotificationData, 'id' | 'scheduled'>): Promise<string> {
    const id = `${notification.type}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    const fullNotification: NotificationData = {
      ...notification,
      id,
      scheduled: true,
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    const hasPermission = await this.requestPermissions();
    if (!hasPermission) {
      throw new Error('–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
    }

    // –ü–ª–∞–Ω–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    PushNotification.localNotificationSchedule({
      id: parseInt(id.replace(/\D/g, '').slice(-8)), // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 8 —Ü–∏—Ñ—Ä
      title: fullNotification.title,
      message: fullNotification.message,
      date: fullNotification.date,
      userInfo: {
        habitId: fullNotification.habitId,
        type: fullNotification.type,
        id: fullNotification.id,
      },
      playSound: true,
      soundName: 'default',
      vibrate: true,
      vibration: 300,
      priority: 'high',
      importance: 'high',
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ MMKV
    const scheduledNotifications = this.getScheduledNotifications();
    scheduledNotifications.push(fullNotification);
    mmkvStorageAdapter.setItem('scheduled_notifications', JSON.stringify(scheduledNotifications));

    return id;
  }

  async scheduleHabitReminder(habitId: string, habitName: string, time: Date): Promise<string> {
    const settings = this.getNotificationSettings();
    if (!settings.habitReminders) {
      throw new Error('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–≤—ã—á–∫–∞—Ö –æ—Ç–∫–ª—é—á–µ–Ω—ã');
    }

    return this.scheduleNotification({
      title: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–∏–≤—ã—á–∫–µ',
      message: `–í—Ä–µ–º—è –¥–ª—è: ${habitName}`,
      date: time,
      habitId,
      type: 'habit_reminder',
    });
  }


  async scheduleMotivationalMessage(time: Date): Promise<string> {
    const settings = this.getNotificationSettings();
    if (!settings.motivationalMessages || !settings.allNotifications) {
      throw new Error('–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã');
    }

    const messages = [
      '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –¥–≤–∏–≥–∞—Ç—å—Å—è –∫ —Å–≤–æ–µ–π —Ü–µ–ª–∏! üí™',
      '–ö–∞–∂–¥—ã–π –¥–µ–Ω—å - —ç—Ç–æ –Ω–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å! ‚ú®',
      '–í—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏! üéØ',
      '–ù–µ–±–æ–ª—å—à–∏–µ —à–∞–≥–∏ –≤–µ–¥—É—Ç –∫ –±–æ–ª—å—à–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º! üöÄ',
      '–°–µ–≥–æ–¥–Ω—è –≤—ã —Å—Ç–∞–ª–∏ –ª—É—á—à–µ, —á–µ–º –≤—á–µ—Ä–∞! üåü',
      '–í–∞—à–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ - —ç—Ç–æ –≤–∞—à–∞ —Å–≤–æ–±–æ–¥–∞! üî•',
    ];

    const randomMessage = messages[Math.floor(Math.random() * messages.length)];

    return this.scheduleNotification({
      title: '–ú–æ—Ç–∏–≤–∞—Ü–∏—è',
      message: randomMessage,
      date: time,
      type: 'motivation',
    });
  }

  async scheduleHabitRemindersForAllHabits(): Promise<void> {
    console.log('üîî scheduleHabitRemindersForAllHabits: Starting...');
    
    const settings = this.getNotificationSettings();
    console.log('üîî Settings:', settings);
    
    if (!settings.habitReminders || !settings.allNotifications) {
      console.log('üîî Habit reminders or all notifications disabled');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏ –∏–∑ MMKV (Zustand —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–¥ –∫–ª—é—á–æ–º 'habits-store')
    const habitsStoreData = mmkvStorageAdapter.getItem('habits-store');
    console.log('üîî Habits store data from MMKV:', habitsStoreData);
    
    if (!habitsStoreData) {
      console.log('üîî No habits store found in MMKV');
      return;
    }

    const habitsStore = JSON.parse(habitsStoreData);
    const habits = habitsStore.state?.habits || habitsStore.habits || [];
    console.log('üîî Parsed habits:', habits);
    
    if (!Array.isArray(habits) || habits.length === 0) {
      console.log('üîî No habits found in store');
      return;
    }
    
    const [hours, minutes] = settings.habitReminderTime.split(':').map(Number);
    const today = new Date();
    console.log('üîî Reminder time:', hours, minutes);
    console.log('üîî Today:', today);

    // –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∏–≤—ã—á–∫–∞—Ö
    const scheduledNotifications = this.getScheduledNotifications();
    const habitReminders = scheduledNotifications.filter(n => n.type === 'habit_reminder');
    console.log('üîî Existing habit reminders to cancel:', habitReminders.length);
    
    for (const reminder of habitReminders) {
      await this.cancelNotification(reminder.id);
    }

    // –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –ø—Ä–∏–≤—ã—á–∫–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 4 –Ω–µ–¥–µ–ª–∏
    let scheduledCount = 0;
    
    // –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const tomorrow = new Date();
    tomorrow.setDate(today.getDate() + 1);
    tomorrow.setHours(hours, minutes, 0, 0);
    
    console.log('üîî Scheduling test notification for tomorrow:', tomorrow);
    
    for (const habit of habits) {
      try {
        const notificationId = await this.scheduleNotification({
          title: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–∏–≤—ã—á–∫–µ',
          message: `–í—Ä–µ–º—è –¥–ª—è: ${habit.name}`,
          date: tomorrow,
          habitId: habit.id,
          type: 'habit_reminder',
        });
        console.log('üîî Scheduled notification:', notificationId, 'for habit:', habit.name);
        scheduledCount++;
      } catch (error) {
        console.error('üîî Error scheduling notification for habit:', habit.name, error);
      }
    }
    
    // –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
    for (let week = 0; week < 4; week++) {
      for (const dayOfWeek of settings.habitReminderDays) {
        const notificationDate = new Date(today);
        const daysUntilTarget = (dayOfWeek - today.getDay() + 7) % 7;
        notificationDate.setDate(today.getDate() + daysUntilTarget + (7 * week));
        notificationDate.setHours(hours, minutes, 0, 0);

        console.log('üîî Checking date:', notificationDate, 'vs today:', today);

        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—à–µ–¥—à–∏–µ –¥–∞—Ç—ã
        if (notificationDate > today) {
          console.log('üîî Scheduling for date:', notificationDate);
          for (const habit of habits) {
            try {
              const notificationId = await this.scheduleNotification({
                title: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–∏–≤—ã—á–∫–µ',
                message: `–í—Ä–µ–º—è –¥–ª—è: ${habit.name}`,
                date: notificationDate,
                habitId: habit.id,
                type: 'habit_reminder',
              });
              console.log('üîî Scheduled notification:', notificationId, 'for habit:', habit.name);
              scheduledCount++;
            } catch (error) {
              console.error('üîî Error scheduling notification for habit:', habit.name, error);
            }
          }
        } else {
          console.log('üîî Skipping past date:', notificationDate);
        }
      }
    }
    
    console.log('üîî Total scheduled notifications:', scheduledCount);
  }


  async cancelNotification(notificationId: string): Promise<void> {
    // –û—Ç–º–µ–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const numericId = parseInt(notificationId.replace(/\D/g, '').slice(-8));
    PushNotification.cancelLocalNotifications({ id: numericId.toString() });
    
    // –£–¥–∞–ª—è–µ–º –∏–∑ MMKV
    const scheduledNotifications = this.getScheduledNotifications();
    const filtered = scheduledNotifications.filter((n: NotificationData) => n.id !== notificationId);
    mmkvStorageAdapter.setItem('scheduled_notifications', JSON.stringify(filtered));
  }

  async cancelHabitReminders(habitId: string): Promise<void> {
    const scheduledNotifications = this.getScheduledNotifications();
    const habitNotifications = scheduledNotifications.filter(
      (n: NotificationData) => n.habitId === habitId && n.type === 'habit_reminder'
    );

    for (const notification of habitNotifications) {
      await this.cancelNotification(notification.id);
    }
  }

  async cancelAllNotifications(): Promise<void> {
    PushNotification.cancelAllLocalNotifications();
    mmkvStorageAdapter.setItem('scheduled_notifications', JSON.stringify([]));
  }

  getScheduledNotifications(): NotificationData[] {
    const notificationsStr = mmkvStorageAdapter.getItem('scheduled_notifications');
    if (notificationsStr) {
      try {
        const notifications = JSON.parse(notificationsStr);
        if (Array.isArray(notifications)) {
          return notifications;
        }
      } catch (error) {
        console.error('Error parsing scheduled notifications:', error);
      }
    }
    return [];
  }

  getNotificationSettings(): NotificationSettings {
    const settingsStr = mmkvStorageAdapter.getItem('notification_settings');
    if (settingsStr) {
      try {
        const settings = JSON.parse(settingsStr);
        if (typeof settings === 'object') {
          return settings as NotificationSettings;
        }
      } catch (error) {
        console.error('Error parsing notification settings:', error);
      }
    }
    
    return {
      allNotifications: true,
      habitReminders: true,
      motivationalMessages: true,
      habitReminderTime: '09:00',
      habitReminderDays: [1, 2, 3, 4, 5], // –ü–Ω-–ü—Ç
      motivationalTime: '09:00',
    };
  }

  updateNotificationSettings(settings: Partial<NotificationSettings>): void {
    const currentSettings = this.getNotificationSettings();
    const newSettings = { ...currentSettings, ...settings };
    mmkvStorageAdapter.setItem('notification_settings', JSON.stringify(newSettings));
  }

  async getToken(): Promise<string | null> {
    if (this.pushToken) {
      return this.pushToken;
    }
    
    return mmkvStorageAdapter.getItem('push_token');
  }


  private handleNotificationPress(notification: any): void {
    const { habitId, type } = notification.userInfo || {};
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notificationClicksStr = mmkvStorageAdapter.getItem('notification_clicks');
    const notificationClicks = notificationClicksStr ? JSON.parse(notificationClicksStr) : [];
    notificationClicks.push({
      id: notification.userInfo?.id,
      type,
      habitId,
      timestamp: new Date().toISOString(),
    });
    mmkvStorageAdapter.setItem('notification_clicks', JSON.stringify(notificationClicks));

    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∫ –Ω—É–∂–Ω–æ–º—É —ç–∫—Ä–∞–Ω—É
    console.log('Notification pressed:', { habitId, type });
  }

  private handleNotificationAction(notification: any): void {
    console.log('Notification action pressed:', notification);
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–µ—à–µ–º
  async cacheNotificationData(data: any): Promise<void> {
    const cacheKey = `notification_cache_${Date.now()}`;
    mmkvStorageAdapter.setItem(cacheKey, JSON.stringify({
      data,
      timestamp: Date.now(),
      expiresAt: Date.now() + (24 * 60 * 60 * 1000), // 24 —á–∞—Å–∞
    }));
  }

  async getCachedNotificationData(cacheKey: string): Promise<any | null> {
    const cachedStr = mmkvStorageAdapter.getItem(cacheKey);
    if (!cachedStr) return null;

    try {
      const cached = JSON.parse(cachedStr);
      if (typeof cached === 'object' && cached.expiresAt) {
        if (Date.now() > cached.expiresAt) {
          mmkvStorageAdapter.removeItem(cacheKey);
          return null;
        }
        return cached.data;
      }
    } catch (error) {
      console.error('Error parsing cached data:', error);
    }

    return null;
  }

  // –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∫–µ—à–µ–π (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
  cleanupExpiredCache(): void {
    // –í —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞–µ–º –≤—Å–µ –∫–µ—à–∏ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
    // –≠—Ç–æ –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
    console.log('Cache cleanup: simplified version - no automatic cleanup');
  }
}

export const notificationService = new NotificationService();
